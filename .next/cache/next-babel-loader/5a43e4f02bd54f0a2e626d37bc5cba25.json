{"ast":null,"code":"var _jsxFileName = \"/home/shankarganesh.j/react/nextjs-material-ui/components/Wrappers.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { withStyles, Badge as BadgeBase, Typography as TypographyBase, Button as ButtonBase } from \"@material-ui/core\";\nimport { useTheme, makeStyles } from \"@material-ui/styles\";\nimport classnames from \"classnames\"; // styles\n\nvar useStyles = makeStyles(theme => ({\n  badge: {\n    fontWeight: 600,\n    height: 16,\n    minWidth: 16\n  }\n}));\n\nfunction Badge(_ref) {\n  let {\n    children,\n    colorBrightness,\n    color\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"colorBrightness\", \"color\"]);\n\n  var classes = useStyles();\n  var theme = useTheme();\n  var Styled = createStyled({\n    badge: {\n      backgroundColor: getColor(color, theme, colorBrightness)\n    }\n  });\n  return __jsx(Styled, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, styledProps => __jsx(BadgeBase, _extends({\n    classes: {\n      badge: classnames(classes.badge, styledProps.classes.badge)\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), children));\n}\n\nfunction Typography(_ref2) {\n  let {\n    children,\n    weight,\n    size,\n    colorBrightness,\n    color\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"children\", \"weight\", \"size\", \"colorBrightness\", \"color\"]);\n\n  var theme = useTheme();\n  return __jsx(TypographyBase, _extends({\n    style: {\n      color: getColor(color, theme, colorBrightness),\n      fontWeight: getFontWeight(weight),\n      fontSize: getFontSize(size, props.variant, theme)\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), children);\n}\n\nfunction Button(_ref3) {\n  let {\n    children,\n    color,\n    className\n  } = _ref3,\n      props = _objectWithoutProperties(_ref3, [\"children\", \"color\", \"className\"]);\n\n  var theme = useTheme();\n  var Styled = createStyled({\n    root: {\n      color: getColor(color, theme)\n    },\n    contained: {\n      backgroundColor: getColor(color, theme),\n      boxShadow: theme.customShadows.widget,\n      color: `${color ? \"white\" : theme.palette.text.primary} !important`,\n      \"&:hover\": {\n        backgroundColor: getColor(color, theme, \"light\"),\n        boxShadow: theme.customShadows.widgetWide\n      },\n      \"&:active\": {\n        boxShadow: theme.customShadows.widgetWide\n      }\n    },\n    outlined: {\n      color: getColor(color, theme),\n      borderColor: getColor(color, theme)\n    },\n    select: {\n      backgroundColor: theme.palette.primary.main,\n      color: \"#fff\"\n    }\n  });\n  return __jsx(Styled, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, ({\n    classes\n  }) => __jsx(ButtonBase, _extends({\n    classes: {\n      contained: classes.contained,\n      root: classes.root,\n      outlined: classes.outlined\n    }\n  }, props, {\n    className: classnames({\n      [classes.select]: props.select\n    }, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), children));\n}\n\nexport { Badge, Typography, Button }; // ########################################################################\n\nfunction getColor(color, theme, brigtness = \"main\") {\n  if (color && theme.palette[color] && theme.palette[color][brigtness]) {\n    return theme.palette[color][brigtness];\n  }\n}\n\nfunction getFontWeight(style) {\n  switch (style) {\n    case \"light\":\n      return 300;\n\n    case \"medium\":\n      return 500;\n\n    case \"bold\":\n      return 600;\n\n    default:\n      return 400;\n  }\n}\n\nfunction getFontSize(size, variant = \"\", theme) {\n  var multiplier;\n\n  switch (size) {\n    case \"sm\":\n      multiplier = 0.8;\n      break;\n\n    case \"md\":\n      multiplier = 1.5;\n      break;\n\n    case \"xl\":\n      multiplier = 2;\n      break;\n\n    case \"xxl\":\n      multiplier = 3;\n      break;\n\n    default:\n      multiplier = 1;\n      break;\n  }\n\n  var defaultSize = variant && theme.typography[variant] ? theme.typography[variant].fontSize : theme.typography.fontSize + \"px\";\n  return `calc(${defaultSize} * ${multiplier})`;\n}\n\nfunction createStyled(styles, options) {\n  var Styled = function (props) {\n    const {\n      children\n    } = props,\n          other = _objectWithoutProperties(props, [\"children\"]);\n\n    return children(other);\n  };\n\n  return withStyles(styles, options)(Styled);\n}","map":{"version":3,"sources":["/home/shankarganesh.j/react/nextjs-material-ui/components/Wrappers.js"],"names":["React","withStyles","Badge","BadgeBase","Typography","TypographyBase","Button","ButtonBase","useTheme","makeStyles","classnames","useStyles","theme","badge","fontWeight","height","minWidth","children","colorBrightness","color","props","classes","Styled","createStyled","backgroundColor","getColor","styledProps","weight","size","getFontWeight","fontSize","getFontSize","variant","className","root","contained","boxShadow","customShadows","widget","palette","text","primary","widgetWide","outlined","borderColor","select","main","brigtness","style","multiplier","defaultSize","typography","styles","options","other"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  withStyles,\n  Badge as BadgeBase,\n  Typography as TypographyBase,\n  Button as ButtonBase,\n} from \"@material-ui/core\";\nimport { useTheme, makeStyles } from \"@material-ui/styles\";\nimport classnames from \"classnames\";\n\n// styles\nvar useStyles = makeStyles(theme => ({\n  badge: {\n    fontWeight: 600,\n    height: 16,\n    minWidth: 16,\n  },\n}));\n\nfunction Badge({ children, colorBrightness, color, ...props }) {\n  var classes = useStyles();\n  var theme = useTheme();\n  var Styled = createStyled({\n    badge: {\n      backgroundColor: getColor(color, theme, colorBrightness),\n    },\n  });\n\n  return (\n    <Styled>\n      {styledProps => (\n        <BadgeBase\n          classes={{\n            badge: classnames(classes.badge, styledProps.classes.badge),\n          }}\n          {...props}\n        >\n          {children}\n        </BadgeBase>\n      )}\n    </Styled>\n  );\n}\n\nfunction Typography({\n  children,\n  weight,\n  size,\n  colorBrightness,\n  color,\n  ...props\n}) {\n  var theme = useTheme();\n\n  return (\n    <TypographyBase\n      style={{\n        color: getColor(color, theme, colorBrightness),\n        fontWeight: getFontWeight(weight),\n        fontSize: getFontSize(size, props.variant, theme),\n      }}\n      {...props}\n    >\n      {children}\n    </TypographyBase>\n  );\n}\n\nfunction Button({ children, color, className, ...props }) {\n  var theme = useTheme();\n\n  var Styled = createStyled({\n    root: {\n      color: getColor(color, theme),\n    },\n    contained: {\n      backgroundColor: getColor(color, theme),\n      boxShadow: theme.customShadows.widget,\n      color: `${color ? \"white\" : theme.palette.text.primary} !important`,\n      \"&:hover\": {\n        backgroundColor: getColor(color, theme, \"light\"),\n        boxShadow: theme.customShadows.widgetWide,\n      },\n      \"&:active\": {\n        boxShadow: theme.customShadows.widgetWide,\n      },\n    },\n    outlined: {\n      color: getColor(color, theme),\n      borderColor: getColor(color, theme),\n    },\n    select: {\n      backgroundColor: theme.palette.primary.main,\n      color: \"#fff\",\n    },\n  });\n\n  return (\n    <Styled>\n      {({ classes }) => (\n        <ButtonBase\n          classes={{\n            contained: classes.contained,\n            root: classes.root,\n            outlined: classes.outlined,\n          }}\n          {...props}\n          className={classnames(\n            {\n              [classes.select]: props.select,\n            },\n            className,\n          )}\n        >\n          {children}\n        </ButtonBase>\n      )}\n    </Styled>\n  );\n}\n\nexport { Badge, Typography, Button };\n\n// ########################################################################\n\nfunction getColor(color, theme, brigtness = \"main\") {\n  if (color && theme.palette[color] && theme.palette[color][brigtness]) {\n    return theme.palette[color][brigtness];\n  }\n}\n\nfunction getFontWeight(style) {\n  switch (style) {\n    case \"light\":\n      return 300;\n    case \"medium\":\n      return 500;\n    case \"bold\":\n      return 600;\n    default:\n      return 400;\n  }\n}\n\nfunction getFontSize(size, variant = \"\", theme) {\n  var multiplier;\n\n  switch (size) {\n    case \"sm\":\n      multiplier = 0.8;\n      break;\n    case \"md\":\n      multiplier = 1.5;\n      break;\n    case \"xl\":\n      multiplier = 2;\n      break;\n    case \"xxl\":\n      multiplier = 3;\n      break;\n    default:\n      multiplier = 1;\n      break;\n  }\n\n  var defaultSize =\n    variant && theme.typography[variant]\n      ? theme.typography[variant].fontSize\n      : theme.typography.fontSize + \"px\";\n\n  return `calc(${defaultSize} * ${multiplier})`;\n}\n\nfunction createStyled(styles, options) {\n  var Styled = function(props) {\n    const { children, ...other } = props;\n    return children(other);\n  };\n\n  return withStyles(styles, options)(Styled);\n}\n"]},"metadata":{},"sourceType":"module"}